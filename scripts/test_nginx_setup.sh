#!/bin/bash

set -e

echo "üß™ Testando configura√ß√£o do Nginx com HTTPS e mutual TLS..."

CERT_DIR="***REMOVED***"
CLIENT_CERT_DIR="$HOME/mcp_certs/client_certs"

echo "üîç Verificando se o Nginx est√° rodando..."
if ! systemctl is-active --quiet nginx; then
    echo "‚ùå Nginx n√£o est√° rodando"
    echo "Execute: sudo systemctl start nginx"
    exit 1
fi
echo "‚úÖ Nginx est√° ativo"

echo "üîç Verificando se a porta 443 est√° aberta..."
if ! netstat -tlnp | grep -q ":443"; then
    echo "‚ùå Porta 443 n√£o est√° aberta"
    exit 1
fi
echo "‚úÖ Porta 443 est√° aberta"

echo "üîç Verificando certificados do servidor..."
for cert in "ca-cert.pem" "server-cert.pem" "server-key.pem"; do
    if [ ! -f "$CERT_DIR/$cert" ]; then
        echo "‚ùå Certificado n√£o encontrado: $CERT_DIR/$cert"
        exit 1
    fi
done
echo "‚úÖ Certificados do servidor encontrados"

echo "üîç Verificando certificados do cliente..."
if [ -d "$CLIENT_CERT_DIR" ]; then
    for cert in "ca-cert.pem" "client-cert.pem" "client-key.pem"; do
        if [ ! -f "$CLIENT_CERT_DIR/$cert" ]; then
            echo "‚ö†Ô∏è  Certificado do cliente n√£o encontrado: $CLIENT_CERT_DIR/$cert"
            echo "   Este √© necess√°rio para testar a conectividade do cliente"
        fi
    done
    echo "‚úÖ Certificados do cliente encontrados"
else
    echo "‚ö†Ô∏è  Diret√≥rio de certificados do cliente n√£o encontrado: $CLIENT_CERT_DIR"
    echo "   Criando estrutura de exemplo..."
    mkdir -p "$CLIENT_CERT_DIR"
    echo "   Copie os certificados do cliente para este diret√≥rio"
fi

echo "üîç Testando configura√ß√£o do Nginx..."
if ! sudo nginx -t 2>/dev/null; then
    echo "‚ùå Configura√ß√£o do Nginx inv√°lida"
    echo "Execute: sudo nginx -t"
    exit 1
fi
echo "‚úÖ Configura√ß√£o do Nginx v√°lida"

echo "üîç Testando redirecionamento HTTP -> HTTPS..."
HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -L http://localhost/ 2>/dev/null || echo "000")
if [ "$HTTP_RESPONSE" != "200" ]; then
    echo "‚ö†Ô∏è  Redirecionamento HTTP pode n√£o estar funcionando (c√≥digo: $HTTP_RESPONSE)"
else
    echo "‚úÖ Redirecionamento HTTP funcionando"
fi

echo "üîç Testando conectividade HTTPS sem certificado cliente..."
HTTPS_NO_CERT=$(curl -k -s -o /dev/null -w "%{http_code}" https://localhost/ 2>/dev/null || echo "000")
if [ "$HTTPS_NO_CERT" = "400" ] || [ "$HTTPS_NO_CERT" = "403" ]; then
    echo "‚úÖ Mutual TLS est√° funcionando (rejeitou conex√£o sem certificado cliente)"
else
    echo "‚ö†Ô∏è  Mutual TLS pode n√£o estar configurado corretamente (c√≥digo: $HTTPS_NO_CERT)"
fi

if [ -f "$CLIENT_CERT_DIR/client-cert.pem" ] && [ -f "$CLIENT_CERT_DIR/client-key.pem" ]; then
    echo "üîç Testando conectividade HTTPS com certificado cliente..."
    HTTPS_WITH_CERT=$(curl -k \
        --cert "$CLIENT_CERT_DIR/client-cert.pem" \
        --key "$CLIENT_CERT_DIR/client-key.pem" \
        --cacert "$CLIENT_CERT_DIR/ca-cert.pem" \
        -s -o /dev/null -w "%{http_code}" \
        https://localhost/ 2>/dev/null || echo "000")
    
    if [ "$HTTPS_WITH_CERT" = "200" ]; then
        echo "‚úÖ Conectividade HTTPS com certificado cliente funcionando"
    else
        echo "‚ùå Falha na conectividade HTTPS com certificado cliente (c√≥digo: $HTTPS_WITH_CERT)"
    fi

    echo "üîç Testando endpoint SSE..."
    SSE_RESPONSE=$(curl -k \
        --cert "$CLIENT_CERT_DIR/client-cert.pem" \
        --key "$CLIENT_CERT_DIR/client-key.pem" \
        --cacert "$CLIENT_CERT_DIR/ca-cert.pem" \
        -s -o /dev/null -w "%{http_code}" \
        -X POST https://localhost/sse \
        -H "Content-Type: application/json" \
        -d '{"jsonrpc": "2.0", "id": 1, "method": "tools/list", "params": {}}' \
        2>/dev/null || echo "000")
    
    if [ "$SSE_RESPONSE" = "200" ]; then
        echo "‚úÖ Endpoint SSE funcionando"
    else
        echo "‚ùå Falha no endpoint SSE (c√≥digo: $SSE_RESPONSE)"
    fi
else
    echo "‚ö†Ô∏è  Certificados do cliente n√£o encontrados - pulando testes de conectividade"
fi

echo "üîç Verificando logs do Nginx..."
if [ -f "/var/log/nginx/mcp_access.log" ]; then
    echo "‚úÖ Log de acesso encontrado: /var/log/nginx/mcp_access.log"
    echo "   √öltimas 5 entradas:"
    tail -n 5 /var/log/nginx/mcp_access.log 2>/dev/null | sed 's/^/   /'
else
    echo "‚ö†Ô∏è  Log de acesso n√£o encontrado"
fi

if [ -f "/var/log/nginx/mcp_error.log" ]; then
    echo "‚úÖ Log de erro encontrado: /var/log/nginx/mcp_error.log"
    if [ -s "/var/log/nginx/mcp_error.log" ]; then
        echo "   √öltimas 5 entradas de erro:"
        tail -n 5 /var/log/nginx/mcp_error.log 2>/dev/null | sed 's/^/   /'
    else
        echo "   (Nenhum erro registrado)"
    fi
else
    echo "‚ö†Ô∏è  Log de erro n√£o encontrado"
fi

echo "üîç Verificando processo do MCP server..."
if pgrep -f "mcp_cli.*3001" > /dev/null; then
    echo "‚úÖ MCP server est√° rodando na porta 3001"
else
    echo "‚ùå MCP server n√£o est√° rodando na porta 3001"
    echo "Execute: sudo systemctl start google-calendar-mcp"
fi

echo ""
echo "üìã Resumo dos testes:"
echo "  - Nginx ativo: ‚úÖ"
echo "  - Porta 443 aberta: ‚úÖ"
echo "  - Certificados servidor: ‚úÖ"
echo "  - Configura√ß√£o v√°lida: ‚úÖ"
echo "  - Redirecionamento HTTP: $([ "$HTTP_RESPONSE" = "200" ] && echo "‚úÖ" || echo "‚ö†Ô∏è")"
echo "  - Mutual TLS: $([ "$HTTPS_NO_CERT" = "400" ] || [ "$HTTPS_NO_CERT" = "403" ] && echo "‚úÖ" || echo "‚ö†Ô∏è")"
if [ -f "$CLIENT_CERT_DIR/client-cert.pem" ]; then
    echo "  - HTTPS c/ certificado: $([ "$HTTPS_WITH_CERT" = "200" ] && echo "‚úÖ" || echo "‚ùå")"
    echo "  - Endpoint SSE: $([ "$SSE_RESPONSE" = "200" ] && echo "‚úÖ" || echo "‚ùå")"
fi
echo "  - MCP server: $(pgrep -f "mcp_cli.*3001" > /dev/null && echo "‚úÖ" || echo "‚ùå")"

echo ""
echo "üîß Comandos √∫teis para debugging:"
echo "  - Status Nginx: sudo systemctl status nginx"
echo "  - Logs Nginx: sudo journalctl -u nginx -f"
echo "  - Teste config: sudo nginx -t"
echo "  - Status MCP: sudo systemctl status google-calendar-mcp"
echo "  - Logs MCP: sudo journalctl -u google-calendar-mcp -f" 